#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

void generate_uniform(int *arr, int n, int m, int M);
void generate_normal(double *arr, int n, double mu, double sigma);
void generate_truncated_normal(int *arr, int n, double mu, double sigma, int m, int M);
void calculate_stats(double *arr, int n, double *mean, double *std_dev);
void calculate_stats_int(int *arr, int n, double *mean, double *std_dev);
void run_scenario(double mu, double sigma, int m, int M, int n);

void genereate_uniform (int *arr, int n,int m, int M) {
    for (int i = 0; i < n; i++) {
        arr[i] = m + rand() % (M - m + 1);
    }
}
void generate_normal(double *arr, int n, double mu, double sigma) {
    for (int i = 0; i < n; i++) {
        double u1 = (rand() + 1.0) / (RAND_MAX + 2.0);
        double u2 = (rand() + 1.0) / (RAND_MAX + 2.0);
        double z0 = sqrt(-2.0 * log(u1)) * cos(2 * M_PI * u2);
        arr[i] = mu + z0 * sigma;
    }
}
void generate_truncated_normal(int *arr, int n, double mu, double sigma, int m, int M) {
    for (int i = 0; i < n; i++) {
        int value;
        do {
            double u1 = (rand() + 1.0) / (RAND_MAX + 2.0);
            double u2 = (rand() + 1.0) / (RAND_MAX + 2.0);
            double z0 = sqrt(-2.0 * log(u1)) * cos(2 * M_PI * u2);
            value = (int)round(mu + z0 * sigma);
        } while (value < m || value > M);
        arr[i] = value;
    }
}
void calculate_stats(double *arr, int n, double *mean, double *std_dev) {
    double sum = 0.0;
    for (int i = 0; i < n; i++) sum += arr[i];
    *mean = sum / n;

    double variance = 0.0;
    for (int i = 0; i < n; i++) variance += pow(arr[i] - *mean, 2);
    *std_dev = sqrt(variance / n);
}
void calculate_stats_int(int *arr, int n, double *mean, double *std_dev) {
    double temp[n];
    for (int i = 0; i < n; i++) temp[i] = arr[i];
    calculate_stats(temp, n, mean, std_dev);
}
void run_scenario(double mu, double sigma, int m, int M, int n) {
    int u[n], t[n];
    double v[n];

    generate_uniform(u, n, m, M);
    generate_normal(v, n, mu, sigma);
    generate_truncated_normal(t, n, mu, sigma, m, M);

    double mean, std_dev;

    printf("Uniform Distribution (u):\n");
    calculate_stats_int(u, n, &mean, &std_dev);
    printf("Mean = %.2f, Std Dev = %.2f\n\n", mean, std_dev);

    printf("Normal Distribution (v):\n");
    calculate_stats(v, n, &mean, &std_dev);
    printf("Mean = %.2f, Std Dev = %.2f\n\n", mean, std_dev);

    printf("Truncated Normal (t):\n");
    calculate_stats_int(t, n, &mean, &std_dev);
    printf("Mean = %.2f, Std Dev = %.2f\n\n", mean, std_dev);
}
int main() {
    srand(time(NULL));

    printf("Scenario #1:\n");
    run_scenario(5, 1, 1, 8, 20);

    printf("Scenario #2:\n");
    run_scenario(pow(2, 10), pow(2, 8), 1, 2000, 200000);

    printf("Scenario #3:\n");
    run_scenario(pow(2, 12), 1.3 * pow(2, 10), 1, 8100, 2000000);

    return 0;
}
